Interfaces in PHP provide a way to define a contract or a set of rules that a class must adhere to. They specify the methods that a class implementing the interface should have. An interface serves as a blueprint for a class, ensuring that the class has certain methods defined.

Here's an example of an interface in PHP:

```php
interface Logger {
    public function log($message);
}
```

In this example, we define an interface called `Logger` with a single method `log()`. Any class that implements this interface must provide an implementation for the `log()` method.

Now, let's see how polymorphism comes into play. Polymorphism allows us to use objects of different classes that implement the same interface interchangeably.

Consider the following classes:

```php
class FileLogger implements Logger {
    public function log($message) {
        // Log message to a file
        echo "Logging to file: $message" . PHP_EOL;
    }
}

class DatabaseLogger implements Logger {
    public function log($message) {
        // Log message to a database
        echo "Logging to database: $message" . PHP_EOL;
    }
}
```

Both `FileLogger` and `DatabaseLogger` classes implement the `Logger` interface and provide their own implementation of the `log()` method.

Now, let's use polymorphism to log a message without knowing which logger class is being used:

```php
function performLogging(Logger $logger, $message) {
    $logger->log($message);
}

$fileLogger = new FileLogger();
$databaseLogger = new DatabaseLogger();

performLogging($fileLogger, "Hello, World!"); // Logs to a file
performLogging($databaseLogger, "Hello, World!"); // Logs to a database
```

In this example, the `performLogging()` function accepts an object of type `Logger` (the interface) as its parameter. It doesn't need to know the specific implementation class; it only relies on the fact that the object being passed implements the `Logger` interface.

By using the interface as the type hint, we can ensure that any object passed to the `performLogging()` function must have the `log()` method, allowing for polymorphic behavior. This allows us to write flexible and reusable code, as we can easily swap different logger implementations without affecting the rest of the code.

Interfaces and polymorphism are powerful concepts in PHP that promote code abstraction, decoupling, and flexibility. They enable us to write more modular and extensible code by defining contracts and utilizing interchangeable objects based on those contracts.